@page "/executor"
@using AOC2023.Logic
@using System.Text.Json
@using System.Text.Json.Serialization
@inject HttpClient Http

<PageTitle>AOC2023 - Execution</PageTitle>

<section id="executor">
	<hgroup>
		<h1>Solution Executer</h1>
		<h2>👇 Follow the instructions below 👇</h2>
	</hgroup>

	<p>This is a Blazor WebAssembly application, compiled from C# code. This means that the source code for this app is just the same as in the CLI!</p>

	<h3>Step 1️⃣: Puzzle Selection</h3>

	<p>First off, select a solution which you want to execute. Don't worry about the input for now, you can configure it in the following steps.</p>
	<article>
		<h5>Selected Puzzle</h5>
		<select @onchange="OnDayChanged">
			<option disabled selected="true" value="">---</option>
			@foreach (var day in days)
			{
				<option value="@day.DayNumber">Day @day.DayNumber: @day.Name</option>
			}
		</select>
	</article>

	<h3>Step 2️⃣: Configure Input</h3>
	<p>Select an input file which you want to use to run the test.</p>
	<article>
		<h5>Selected Input</h5>
		<p>You have to select a puzzle first.</p>

		<div class="grid">
			<div>
				<p>From GitHub</p>
				<select @onchange="OnInputChanged">
					<option selected="true" value="@string.Empty">---</option>
					@foreach (var file in files)
					{
						<option value="@file.Key">@file.Key</option>
					}
				</select>
			</div>
			<div>
				<p>Paste it here</p>
				<InputTextArea @bind-Value="rawInputData" rows="1" class="resize-none" disabled="@(!CanUsePasteBox)"></InputTextArea>
			</div>
		</div>
		<button disabled="@(!CanUseLoadButton)" aria-busy="@ShowLoading" @onclick="LoadInput">@LoadText</button>

		
		<p>Status: @InputStatusMessage</p>
	</article>

	<h3>Step 3️⃣: Solve Puzzle</h3>
	<p>Click the button below to run the solution for the selected puzzle and input.</p>
	<article>
		<h5>Run Solution</h5>

		<p>Part  One: @solutionPartOne</p>
		<p>Part  Two: @solutionPartTwo</p>
		<p>Exec Time: @solutionTime ms</p>

		<button disabled="@(!CanUseRunButton)" aria-busy="@ShowExecuting" @onclick="RunPuzzle">Run Solution</button>
	</article>
</section>

@code {

	const string baseUrl = "https://api.github.com/repos/niklas2810/aoc-2023/contents/src/libs/AOC2023.Files/Inputs";

	const string resetString = "???";

	bool loading = false;
	bool executing = false;

	string ShowLoading => loading.ToString().ToLowerInvariant();
	string ShowExecuting => executing.ToString().ToLowerInvariant();

	DayBase? selectedDay = null;

	string selectedFile = string.Empty;
	string rawInputData = string.Empty;
	IEnumerable<string>? loadedInput = null;
	bool CanUsePasteBox => selectedDay != null && string.IsNullOrWhiteSpace(selectedFile);
	string LoadText
	{
		get
		{
			if(!string.IsNullOrWhiteSpace(selectedFile))
				return "Load from GitHub";
			if (!string.IsNullOrWhiteSpace(rawInputData))
				return "Load pasted input";
			return "Select a file or paste input";
		}
	}
	bool CanUseLoadButton => !string.IsNullOrWhiteSpace(selectedFile) || !string.IsNullOrWhiteSpace(rawInputData);

	string solutionPartOne = resetString;
	string solutionPartTwo = resetString;
	string solutionTime = resetString;

	private List<DayBase> days = DayRegistry.GetDays().ToList();
	private Dictionary<string, string> files = new Dictionary<string, string>();

	private bool CanUseRunButton => selectedDay != null && loadedInput != null && loadedInput.Count() > 0;

	private string InputStatusMessage
	{
		get
		{
			if (loadedInput != null && loadedInput.Count() > 0)
				return $"Loaded {loadedInput.Count()} lines";
			if(!string.IsNullOrWhiteSpace(selectedFile))
				return "File not loaded yet";
			if(!string.IsNullOrWhiteSpace(rawInputData))
				return "Pasted text not loaded yet";
			return "Select a file or paste input";
		}
	}

	private async Task GetFilesForDay(DayBase day)
	{
		loading = true;
		Console.WriteLine("getting files");
		var folderUrl = $"{baseUrl}/{day.DayNumber:00}";

		try
		{
			var response = await Http.GetStringAsync(folderUrl);
			// Parse response as JSON as generic object using System.Text.Json
			var data = JsonSerializer.Deserialize<List<Dictionary<string, object>>>(response);
			if (data == null)
			{
				Console.WriteLine("data is null");
				return;
			}

			foreach (var entry in data)
			{
				if (entry.ContainsKey("name") && entry.ContainsKey("download_url"))
					files.Add(entry["name"].ToString() ?? "INVALID", entry["download_url"].ToString() ?? "INVALID");
			}
			Console.WriteLine($"Current puzzle has {files.Count} files on GitHub!");
		} catch (Exception e)
		{
			Console.WriteLine(e.Message);
		}
		loading = false;
	}

	private async Task OnDayChanged(ChangeEventArgs e)
	{
		if (e.Value == null)
			return;

		if (!int.TryParse(e.Value.ToString(), out int result))
			return;

		var day = days.FirstOrDefault(d => d.DayNumber == result);
		if (day == null)
			return;
		ResetPuzzle();
		selectedDay = day;
		await GetFilesForDay(day);
	}

	private void OnInputChanged(ChangeEventArgs e)
	{
		if (e.Value == null)
			return;

		selectedFile = e.Value.ToString() ?? string.Empty;
		ResetInput();
	}

	private void ResetPuzzle()
	{
		selectedDay = null;
		selectedFile = string.Empty;
		files.Clear();
		ResetInput();
	}

	private void ResetInput()
	{
		loading = false;
		loadedInput = null;
		ResetSolution();
	}

	private void ResetSolution()
	{
		executing = false;
		solutionPartOne = resetString;
		solutionPartTwo = resetString;
		solutionTime = resetString;
	}

	private async Task RunPuzzle(MouseEventArgs e)
	{
		if (loadedInput == null || selectedDay == null)
			return;

		DayBase day = selectedDay;

		executing = true;
		var sw = new System.Diagnostics.Stopwatch();
		sw.Start();
		solutionPartOne = (await day.SolvePartOneSafe(loadedInput)).ToString();
		solutionPartTwo = (await day.SolvePartTwoSafe(loadedInput)).ToString();
		solutionTime = sw.ElapsedMilliseconds.ToString();
		executing = false;

	}
	private async Task LoadInput(MouseEventArgs e)
	{
		if (selectedDay == null)
			return;

		loading = true;
		if (!string.IsNullOrEmpty(selectedFile))
			await LoadInputFromFile();
		else
			LoadInputFromPasteBox();
		loading = false;
		

	}

	private async Task LoadInputFromFile()
	{
		var fileUrl = files[selectedFile];
		if (fileUrl == null)
		{
			Console.WriteLine("fileUrl is null");
			return;
		};
		Console.WriteLine(fileUrl);
		
		var response = await Http.GetStringAsync(fileUrl);
		loadedInput = response.Trim().Split("\n");
		/*for(int i = 0; i < loadedInput.Count(); i++)
			Console.WriteLine($"[{i}]: {loadedInput.ElementAt(i)}");*/
	}

	private void LoadInputFromPasteBox()
	{
		loadedInput = rawInputData.Trim().Split("\n");
		/*for (int i = 0; i < loadedInput.Count(); i++)
			Console.WriteLine($"[{i}]: {loadedInput.ElementAt(i)}");*/
	}
}
